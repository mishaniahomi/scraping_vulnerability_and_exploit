import sqlite3
from proxy_auth_data import login, password
from Beautifulsoup_Funcions import get_more_data
import html
def dbf_connection(file_name:str) -> sqlite3.Connection:
    try:
        return sqlite3.connect(file_name)
    except:
        return 0


def get_max_id(table_name: str, conn: sqlite3.Connection) -> int:
    try:
        cur = conn.cursor()
        id = cur.execute("select max(id) from {}".format(table_name)).fetchall()[0][0]
        if id is None:
            return 1
        else:
            return int(id)+1
    except sqlite3.OperationalError as ex:
        print(ex)
        return 0


def add_vulnerabilities(name: str, href: str, severity: int, database: str):
        conn = dbf_connection(database)
        if conn.cursor().execute("select max(id) from vulnerabilities where href='{}'".format(href)).fetchall()[0][0] is None:
            vuln_dict = get_more_data(href)
            print(vuln_dict)
            conn.cursor().execute("insert into vulnerabilities values({}, '{}','{}', {},'{}','{}','{}','{}','{}',"
                                  "'{}','{}','{}')".format(get_max_id("vulnerabilities", conn), html.escape(name), html.escape(href), html.escape(severity),
                                                           html.escape(vuln_dict['CVSS']), html.escape(vuln_dict['Published']),
                                                           html.escape(vuln_dict['Created']),html.escape(vuln_dict['Added']),html.escape(vuln_dict[
                                                                                                 'Modified']),
                                                           html.escape(vuln_dict['Description']),html.escape(vuln_dict['Solution(s)']),
                                                           html.escape(str(vuln_dict['References'])) ))
            conn.commit()
            print("Gotcha!")
            return 1
        else:
            print("No Gotcha!")
            return 0

